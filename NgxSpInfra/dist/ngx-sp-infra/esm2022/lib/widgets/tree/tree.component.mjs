import { Component, EventEmitter, Input, Output } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../svg-storage/svg-storage.component";
import * as i4 from "./pipes/search-tree.pipe";
export class TreeComponent {
    constructor() {
        // #region ==========> PROPERTIES <==========
        // #region PUBLIC
        this.items = [];
        this.checkbox = false;
        this.filter = false;
        this.onSelect = new EventEmitter();
        this.onEvent = new EventEmitter();
        this.checked = (item) => item.is_selected == true;
        this.search = "";
    }
    ngOnInit() { }
    // #endregion PUBLIC
    // #endregion ==========> PROPERTIES <==========
    // #region ==========> PUBLIC METHODS <==========
    onExpand(item) {
        if (item.expanded) {
            item.expanded = !item.expanded;
            return;
        }
        else {
            if (item.children) {
                if (item.children.length > 0) {
                    item.expanded = true;
                }
                else {
                    item.expanded = false;
                }
            }
        }
    }
    onCheck(items, item) {
        if (item.has_children) {
            item.children.forEach((firstNode) => {
                if (firstNode.is_selected != item.is_selected) {
                    firstNode.is_selected = !firstNode.is_selected;
                }
                if (firstNode.has_children) {
                    firstNode.children.forEach((secondNode) => {
                        if (secondNode.is_selected != firstNode.is_selected) {
                            secondNode.is_selected = !secondNode.is_selected;
                        }
                    });
                }
            });
        }
        if (this.indeterminateCheck(items)) {
            this.onSelect.emit(true);
        }
        else if (!this.indeterminateCheck(items)) {
            this.onSelect.emit(false);
        }
    }
    onCheckEvent(items) {
        if (this.indeterminateCheck(items)) {
            this.onEvent.emit(true);
        }
        else {
            this.onEvent.emit(false);
        }
    }
    // #endregion ==========> PUBLIC METHODS <==========
    // #region ==========> PRIVATE METHODS <==========
    indeterminateCheck(list) {
        return list.some(this.checked);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: TreeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.11", type: TreeComponent, selector: "app-tree", inputs: { items: "items", checkbox: "checkbox", filter: "filter" }, outputs: { onSelect: "onSelect", onEvent: "onEvent" }, ngImport: i0, template: "<!-- FILTER -->\r\n<ng-template [ngIf]=\"filter\">\r\n  <!-- <app-search-filters></app-search-filters> -->\r\n\r\n  <div class=\"input-group glb-search-input my-3\">\r\n    <span class=\"input-group-text search px-2 glb-bg-color-white\">\r\n      <app-svg-storage svgName=\"search\" svgColor=\"gray\" svgSize=\"medium-small\"\r\n        class=\"d-flex align-items-center\"></app-svg-storage>\r\n    </span>\r\n    <input type=\"text\" class=\"form-control border-left-none ps-0\" [(ngModel)]=\"search\">\r\n  </div>\r\n  \r\n</ng-template>\r\n<!-- TREE -->\r\n<ul class=\"tree-view\">\r\n  <ng-container *ngFor=\"let item of items | TreeFilter : search; index as i\">\r\n    <div class=\"container py-1\" [class]=\"!item.has_children ? 'children' : null \">\r\n      <app-svg-storage\r\n        class=\"chevron\"\r\n        *ngIf=\"item.has_children\"\r\n        [class]=\"item.aplicClass ? 'rotate' : null\"\r\n        (click)=\"\r\n          onExpand(item);\r\n          item.aplicClass ? (item.aplicClass = false) : (item.aplicClass = true)\r\n        \"\r\n        svgSize=\"medium-small\"\r\n        svgName=\"chevron-right\"\r\n      ></app-svg-storage>\r\n      <!-- CHECKBOX -->\r\n      <ng-template [ngIf]=\"checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          class=\"form-check-input m-0 position-relative\"\r\n          [checked]=\"onCheckEvent(items)\"\r\n          (change)=\"onCheck(items, item)\"\r\n          [(ngModel)]=\"item.is_selected\"\r\n        />\r\n      </ng-template>\r\n      <label class=\"label mb-0 ms-2\">{{ item.label }}</label>\r\n    </div>\r\n    <!-- NODES -->\r\n    <ul *ngIf=\"item.expanded\">\r\n      <app-tree\r\n        (onSelect)=\"item.is_selected = $event\"\r\n        (onEvent)=\"item.is_selected = $event\"\r\n        [items]=\"item.children\"\r\n        [checkbox]=\"checkbox\"\r\n      ></app-tree>\r\n    </ul>\r\n  </ng-container>\r\n</ul>", styles: ["*{font-family:Open Sans,Arial,Helvetica,sans-serif;color:#000;box-sizing:border-box;list-style:none;font-size:1rem}.tree-view{margin:0;padding:0;list-style-type:none;transition:all .3s ease-in-out}.container{margin:0;padding:0;display:flex;align-items:center}.chevron{position:relative;-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-o-transform:rotate(0deg);transform:rotate(0);-webkit-transition:.3s ease-in-out;-moz-transition:.3s ease-in-out;-o-transition:.3s ease-in-out;transition:.3s ease-in-out;color:#000;cursor:pointer}.chevron:hover{color:#0d6efd;transform:rotate(30deg)}.chevron.rotate{transform:rotate(90deg);-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);-o-transform:rotate(90deg);transition:.3s}.form-check-input{cursor:pointer}.children{padding-left:20px}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.SvgStorageComponent, selector: "app-svg-storage", inputs: ["svgName", "svgColor", "svgFill", "svgSize", "svgStrokeWidth"] }, { kind: "component", type: TreeComponent, selector: "app-tree", inputs: ["items", "checkbox", "filter"], outputs: ["onSelect", "onEvent"] }, { kind: "pipe", type: i4.SearchTreePipe, name: "TreeFilter" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: TreeComponent, decorators: [{
            type: Component,
            args: [{ selector: "app-tree", template: "<!-- FILTER -->\r\n<ng-template [ngIf]=\"filter\">\r\n  <!-- <app-search-filters></app-search-filters> -->\r\n\r\n  <div class=\"input-group glb-search-input my-3\">\r\n    <span class=\"input-group-text search px-2 glb-bg-color-white\">\r\n      <app-svg-storage svgName=\"search\" svgColor=\"gray\" svgSize=\"medium-small\"\r\n        class=\"d-flex align-items-center\"></app-svg-storage>\r\n    </span>\r\n    <input type=\"text\" class=\"form-control border-left-none ps-0\" [(ngModel)]=\"search\">\r\n  </div>\r\n  \r\n</ng-template>\r\n<!-- TREE -->\r\n<ul class=\"tree-view\">\r\n  <ng-container *ngFor=\"let item of items | TreeFilter : search; index as i\">\r\n    <div class=\"container py-1\" [class]=\"!item.has_children ? 'children' : null \">\r\n      <app-svg-storage\r\n        class=\"chevron\"\r\n        *ngIf=\"item.has_children\"\r\n        [class]=\"item.aplicClass ? 'rotate' : null\"\r\n        (click)=\"\r\n          onExpand(item);\r\n          item.aplicClass ? (item.aplicClass = false) : (item.aplicClass = true)\r\n        \"\r\n        svgSize=\"medium-small\"\r\n        svgName=\"chevron-right\"\r\n      ></app-svg-storage>\r\n      <!-- CHECKBOX -->\r\n      <ng-template [ngIf]=\"checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          class=\"form-check-input m-0 position-relative\"\r\n          [checked]=\"onCheckEvent(items)\"\r\n          (change)=\"onCheck(items, item)\"\r\n          [(ngModel)]=\"item.is_selected\"\r\n        />\r\n      </ng-template>\r\n      <label class=\"label mb-0 ms-2\">{{ item.label }}</label>\r\n    </div>\r\n    <!-- NODES -->\r\n    <ul *ngIf=\"item.expanded\">\r\n      <app-tree\r\n        (onSelect)=\"item.is_selected = $event\"\r\n        (onEvent)=\"item.is_selected = $event\"\r\n        [items]=\"item.children\"\r\n        [checkbox]=\"checkbox\"\r\n      ></app-tree>\r\n    </ul>\r\n  </ng-container>\r\n</ul>", styles: ["*{font-family:Open Sans,Arial,Helvetica,sans-serif;color:#000;box-sizing:border-box;list-style:none;font-size:1rem}.tree-view{margin:0;padding:0;list-style-type:none;transition:all .3s ease-in-out}.container{margin:0;padding:0;display:flex;align-items:center}.chevron{position:relative;-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-o-transform:rotate(0deg);transform:rotate(0);-webkit-transition:.3s ease-in-out;-moz-transition:.3s ease-in-out;-o-transition:.3s ease-in-out;transition:.3s ease-in-out;color:#000;cursor:pointer}.chevron:hover{color:#0d6efd;transform:rotate(30deg)}.chevron.rotate{transform:rotate(90deg);-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);-o-transform:rotate(90deg);transition:.3s}.form-check-input{cursor:pointer}.children{padding-left:20px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { items: [{
                type: Input
            }], checkbox: [{
                type: Input
            }], filter: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], onEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
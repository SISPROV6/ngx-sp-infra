//Origem  https://pedrohtbranco.com.br/validacao-cpf-e-cnpj-com-angular-12/
export class CpfCnpjValidator {
    static { this.cpfLength = 11; }
    static { this.cnpjLength = 14; }
    /**
    * Calcula o dígito verificador do CPF ou CNPJ.
    */
    static buildDigit(arr) {
        const isCpf = arr.length < CpfCnpjValidator.cpfLength;
        const digit = arr
            .map((val, idx) => val * ((!isCpf ? idx % 8 : idx) + 2))
            .reduce((total, current) => total + current) % CpfCnpjValidator.cpfLength;
        if (digit < 2 && isCpf) {
            return 0;
        }
        else if (digit < 2) {
            return 0;
        }
        return CpfCnpjValidator.cpfLength - digit;
    }
    /**
    * Valida um CPF ou CNPJ de acordo com seu dígito verificador.
    */
    static validate(c) {
        const cpfCnpj = c.value.replace(/\D/g, '');
        if (cpfCnpj === '') {
            return null;
        }
        // Verifica o tamanho da string.
        if ([CpfCnpjValidator.cpfLength, CpfCnpjValidator.cnpjLength].indexOf(cpfCnpj.length) < 0) {
            return { cpcnpjInvalid: true };
        }
        // Verifica se todos os dígitos são iguais, exceto para CPF com dígitos zerados.
        if (/^([0-9])\1*$/.test(cpfCnpj) && cpfCnpj !== '00000000000') {
            return { cpcnpjInvalid: true };
        }
        // A seguir é realizado o cálculo verificador.
        const cpfCnpjArr = cpfCnpj.split('').reverse().slice(2);
        cpfCnpjArr.unshift(CpfCnpjValidator.buildDigit(cpfCnpjArr));
        cpfCnpjArr.unshift(CpfCnpjValidator.buildDigit(cpfCnpjArr));
        if (cpfCnpj !== cpfCnpjArr.reverse().join('')) {
            // Dígito verificador não é válido, resultando em falha.
            return { cpcnpjInvalidDigit: true };
        }
        return null;
    }
    /**
    * Implementa a interface de um validator.
    */
    validate(c) {
        return CpfCnpjValidator.validate(c);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BmLWNucGoudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNwLWluZnJhL3NyYy9saWIvdmFsaWRhdG9ycy9jcGYtY25wai52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsMkVBQTJFO0FBRTNFLE1BQU0sT0FBTyxnQkFBZ0I7YUFFcEIsY0FBUyxHQUFHLEVBQUUsQ0FBQzthQUNmLGVBQVUsR0FBRyxFQUFFLENBQUM7SUFFdkI7O01BRUU7SUFDRixNQUFNLENBQUMsVUFBVSxDQUFDLEdBQWE7UUFFN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7UUFDdEQsTUFBTSxLQUFLLEdBQUcsR0FBRzthQUNkLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3ZELE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7UUFFNUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQzthQUNJLElBQUksS0FBSyxHQUFHLENBQUMsRUFDbEIsQ0FBQztZQUNDLE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQztRQUVELE9BQU8sZ0JBQWdCLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBR0Q7O01BRUU7SUFDRixNQUFNLENBQUMsUUFBUSxDQUFDLENBQWtCO1FBRWhDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUzQyxJQUFJLE9BQU8sS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNuQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzFGLE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDakMsQ0FBQztRQUVELGdGQUFnRjtRQUNoRixJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxLQUFLLGFBQWEsRUFBRSxDQUFDO1lBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDakMsQ0FBQztRQUVELDhDQUE4QztRQUM5QyxNQUFNLFVBQVUsR0FBYSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsRSxVQUFVLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzVELFVBQVUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFNUQsSUFBSSxPQUFPLEtBQUssVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQzlDLHdEQUF3RDtZQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdEMsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztNQUVFO0lBQ0YsUUFBUSxDQUFDLENBQWtCO1FBQ3pCLE9BQU8sZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8vT3JpZ2VtICBodHRwczovL3BlZHJvaHRicmFuY28uY29tLmJyL3ZhbGlkYWNhby1jcGYtZS1jbnBqLWNvbS1hbmd1bGFyLTEyL1xuXG5leHBvcnQgY2xhc3MgQ3BmQ25walZhbGlkYXRvciBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG5cbiAgc3RhdGljIGNwZkxlbmd0aCA9IDExO1xuICBzdGF0aWMgY25wakxlbmd0aCA9IDE0O1xuXG4gIC8qKlxuICAqIENhbGN1bGEgbyBkw61naXRvIHZlcmlmaWNhZG9yIGRvIENQRiBvdSBDTlBKLlxuICAqL1xuICBzdGF0aWMgYnVpbGREaWdpdChhcnI6IG51bWJlcltdKTogbnVtYmVyIHtcblxuICAgIGNvbnN0IGlzQ3BmID0gYXJyLmxlbmd0aCA8IENwZkNucGpWYWxpZGF0b3IuY3BmTGVuZ3RoO1xuICAgIGNvbnN0IGRpZ2l0ID0gYXJyXG4gICAgICAubWFwKCh2YWwsIGlkeCkgPT4gdmFsICogKCghaXNDcGYgPyBpZHggJSA4IDogaWR4KSArIDIpKVxuICAgICAgLnJlZHVjZSgodG90YWwsIGN1cnJlbnQpID0+IHRvdGFsICsgY3VycmVudCkgJSBDcGZDbnBqVmFsaWRhdG9yLmNwZkxlbmd0aDtcblxuICAgIGlmIChkaWdpdCA8IDIgJiYgaXNDcGYpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gXG4gICAgZWxzZSBpZiAoZGlnaXQgPCAyKSBcbiAgICB7IFxuICAgICAgcmV0dXJuIDA7IFxuICAgIH1cblxuICAgIHJldHVybiBDcGZDbnBqVmFsaWRhdG9yLmNwZkxlbmd0aCAtIGRpZ2l0O1xuICB9XG5cblxuICAvKipcbiAgKiBWYWxpZGEgdW0gQ1BGIG91IENOUEogZGUgYWNvcmRvIGNvbSBzZXUgZMOtZ2l0byB2ZXJpZmljYWRvci5cbiAgKi9cbiAgc3RhdGljIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcblxuICAgIGNvbnN0IGNwZkNucGogPSBjLnZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG5cbiAgICBpZiAoY3BmQ25waiA9PT0gJycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhIG8gdGFtYW5obyBkYSBzdHJpbmcuXG4gICAgaWYgKFtDcGZDbnBqVmFsaWRhdG9yLmNwZkxlbmd0aCwgQ3BmQ25walZhbGlkYXRvci5jbnBqTGVuZ3RoXS5pbmRleE9mKGNwZkNucGoubGVuZ3RoKSA8IDApIHtcbiAgICAgIHJldHVybiB7IGNwY25wakludmFsaWQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYSBzZSB0b2RvcyBvcyBkw61naXRvcyBzw6NvIGlndWFpcywgZXhjZXRvIHBhcmEgQ1BGIGNvbSBkw61naXRvcyB6ZXJhZG9zLlxuICAgIGlmICgvXihbMC05XSlcXDEqJC8udGVzdChjcGZDbnBqKSAmJiBjcGZDbnBqICE9PSAnMDAwMDAwMDAwMDAnKSB7XG4gICAgICByZXR1cm4geyBjcGNucGpJbnZhbGlkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgLy8gQSBzZWd1aXIgw6kgcmVhbGl6YWRvIG8gY8OhbGN1bG8gdmVyaWZpY2Fkb3IuXG4gICAgY29uc3QgY3BmQ25wakFycjogbnVtYmVyW10gPSBjcGZDbnBqLnNwbGl0KCcnKS5yZXZlcnNlKCkuc2xpY2UoMik7XG5cbiAgICBjcGZDbnBqQXJyLnVuc2hpZnQoQ3BmQ25walZhbGlkYXRvci5idWlsZERpZ2l0KGNwZkNucGpBcnIpKTtcbiAgICBjcGZDbnBqQXJyLnVuc2hpZnQoQ3BmQ25walZhbGlkYXRvci5idWlsZERpZ2l0KGNwZkNucGpBcnIpKTtcblxuICAgIGlmIChjcGZDbnBqICE9PSBjcGZDbnBqQXJyLnJldmVyc2UoKS5qb2luKCcnKSkge1xuICAgICAgLy8gRMOtZ2l0byB2ZXJpZmljYWRvciBuw6NvIMOpIHbDoWxpZG8sIHJlc3VsdGFuZG8gZW0gZmFsaGEuXG4gICAgICByZXR1cm4geyBjcGNucGpJbnZhbGlkRGlnaXQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAqIEltcGxlbWVudGEgYSBpbnRlcmZhY2UgZGUgdW0gdmFsaWRhdG9yLlxuICAqL1xuICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgcmV0dXJuIENwZkNucGpWYWxpZGF0b3IudmFsaWRhdGUoYyk7XG4gIH1cbn1cbiJdfQ==
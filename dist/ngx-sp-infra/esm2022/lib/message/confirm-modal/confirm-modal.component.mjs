import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ConfirmModalComponent {
    constructor() {
        // #region ==========> PROPERTIES <==========
        // #region PRIVATE
        this._closingModal = new EventEmitter();
        this.genreAndPluralitySubject = 'masc singular';
        // Estas variáveis abaixo servem para deixar o mais genérico possível o modal de confirmalçao
        this.customMessage = '';
        this.customTitle = '';
        this.customButton = '';
        this.customButtonLoading = '';
        this.importantMessage = false;
        this.showSpinner = false;
    }
    // #endregion PUBLIC
    // #endregion ==========> PROPERTIES <==========
    // #region ==========> UTILITIES <==========
    /**
     * Este método recebe uma palavra (podendo ser uma palavra composta), vai
     * separá-la em outras palavras caso ela seja uma palavra composta, irá percorrer
     * as palavras separadas, colocando a inicial de cada palavra em maiúsculo, e
     * depois vai uní-las em uma nova palavra, que terá todas as primeiras letras em
     * maiúsculo para mostrar no título.
     * @param fateWord Palavra (podendo ser ou não palavra composta) que
     * será alterada para ter suas iniciais maiúsculas.
     * @returns Palavra com iniciais maiúscula.
     */
    firstLetterIsLowercase(fateWord) {
        const fateWordSplit = fateWord.split(" ");
        for (let i = 0; i < fateWordSplit.length; i++) {
            fateWordSplit[i] = fateWordSplit[i][0].toLowerCase() + fateWordSplit[i].substring(1);
        }
        return fateWordSplit.join(" ");
    }
    // #endregion ==========> UTILITIES <==========
    // #region ==========> MODALS <==========
    /**
     * Função com o objetivo de mandar um evento para o componente pai para que
     * ele feche o modal.
     */
    closeModal(isExecuteAction = false) {
        this._closingModal.emit(isExecuteAction);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: ConfirmModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.11", type: ConfirmModalComponent, selector: "app-confirm-modal", inputs: { modalSubject: "modalSubject", modalType: "modalType", genreAndPluralitySubject: "genreAndPluralitySubject", customMessage: "customMessage", customTitle: "customTitle", customButton: "customButton", customButtonLoading: "customButtonLoading", importantMessage: "importantMessage" }, outputs: { _closingModal: "_closingModal" }, ngImport: i0, template: "<div class=\"modal-header modal-style modal-dialog-centered\">\r\n  <h4 class=\"modal-title pull-left\"> {{ customTitle === '' ? [modalType + ' ' + modalSubject] : customTitle }} </h4>\r\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"\r\n    (click)=\"closeModal()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <div class=\"modal-message\" [class.text-danger.fw-bold]=\"importantMessage\">\r\n    <span *ngIf=\"customMessage === ''; else showCustomMessage\"> Tem certeza que voc\u00EA quer {{ firstLetterIsLowercase(modalType) }}\r\n      <span [ngSwitch]=\"genreAndPluralitySubject\">\r\n        <span *ngSwitchCase=\"'masc singular'\"> este </span>\r\n        <span *ngSwitchCase=\"'masc plural'\"> estes </span>\r\n        <span *ngSwitchCase=\"'fem singular'\"> esta </span>\r\n        <span *ngSwitchCase=\"'fem plural'\"> estas </span>\r\n      </span>\r\n      {{ firstLetterIsLowercase(modalSubject) }}?\r\n    </span>\r\n\r\n    <ng-template #showCustomMessage>\r\n      <span> {{ customMessage }} </span>\r\n    </ng-template>\r\n\r\n    <span *ngIf=\"modalType == 'Excluir'\" class=\"text-danger fw-bold\"> (esta a\u00E7\u00E3o \u00E9 irrevers\u00EDvel) </span>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-outline-primary modal-button\"\r\n    (click)=\"closeModal()\"> Cancelar </button>\r\n\r\n  <button *ngIf=\"!showSpinner; else loadingButton\" type=\"button\" class=\"btn btn-primary modal-button\"\r\n    (click)=\"showSpinner = true; closeModal(true)\"> {{ customButton === '' ? modalType : customButton }} </button>\r\n\r\n  <ng-template #loadingButton>\r\n    <button class=\"btn btn-primary modal-button\" type=\"button\" disabled>\r\n      <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n      <span> {{ customButtonLoading === '' ? [modalType == 'Excluir' ? 'Excluindo...' : [modalType == 'Ativar' ? 'Ativando...' : 'Inativando...']] : customButtonLoading }} </span>\r\n    </button>\r\n  </ng-template>\r\n\r\n</div>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: ConfirmModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-confirm-modal', template: "<div class=\"modal-header modal-style modal-dialog-centered\">\r\n  <h4 class=\"modal-title pull-left\"> {{ customTitle === '' ? [modalType + ' ' + modalSubject] : customTitle }} </h4>\r\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"\r\n    (click)=\"closeModal()\"></button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <div class=\"modal-message\" [class.text-danger.fw-bold]=\"importantMessage\">\r\n    <span *ngIf=\"customMessage === ''; else showCustomMessage\"> Tem certeza que voc\u00EA quer {{ firstLetterIsLowercase(modalType) }}\r\n      <span [ngSwitch]=\"genreAndPluralitySubject\">\r\n        <span *ngSwitchCase=\"'masc singular'\"> este </span>\r\n        <span *ngSwitchCase=\"'masc plural'\"> estes </span>\r\n        <span *ngSwitchCase=\"'fem singular'\"> esta </span>\r\n        <span *ngSwitchCase=\"'fem plural'\"> estas </span>\r\n      </span>\r\n      {{ firstLetterIsLowercase(modalSubject) }}?\r\n    </span>\r\n\r\n    <ng-template #showCustomMessage>\r\n      <span> {{ customMessage }} </span>\r\n    </ng-template>\r\n\r\n    <span *ngIf=\"modalType == 'Excluir'\" class=\"text-danger fw-bold\"> (esta a\u00E7\u00E3o \u00E9 irrevers\u00EDvel) </span>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-outline-primary modal-button\"\r\n    (click)=\"closeModal()\"> Cancelar </button>\r\n\r\n  <button *ngIf=\"!showSpinner; else loadingButton\" type=\"button\" class=\"btn btn-primary modal-button\"\r\n    (click)=\"showSpinner = true; closeModal(true)\"> {{ customButton === '' ? modalType : customButton }} </button>\r\n\r\n  <ng-template #loadingButton>\r\n    <button class=\"btn btn-primary modal-button\" type=\"button\" disabled>\r\n      <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n      <span> {{ customButtonLoading === '' ? [modalType == 'Excluir' ? 'Excluindo...' : [modalType == 'Ativar' ? 'Ativando...' : 'Inativando...']] : customButtonLoading }} </span>\r\n    </button>\r\n  </ng-template>\r\n\r\n</div>\r\n" }]
        }], ctorParameters: () => [], propDecorators: { _closingModal: [{
                type: Output
            }], modalSubject: [{
                type: Input
            }], modalType: [{
                type: Input
            }], genreAndPluralitySubject: [{
                type: Input
            }], customMessage: [{
                type: Input
            }], customTitle: [{
                type: Input
            }], customButton: [{
                type: Input
            }], customButtonLoading: [{
                type: Input
            }], importantMessage: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
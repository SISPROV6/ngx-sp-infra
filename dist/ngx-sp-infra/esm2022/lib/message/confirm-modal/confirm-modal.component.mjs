import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ConfirmModalComponent {
    constructor() {
        // #region ==========> PROPERTIES <==========
        // #region PRIVATE
        this._closingModal = new EventEmitter();
        this.genreAndPluralitySubject = 'masc singular';
        // Estas variáveis abaixo servem para deixar o mais genérico possível o modal de confirmalçao
        this.customMessage = '';
        this.customTitle = '';
        this.customButton = '';
        this.customButtonLoading = '';
        this.importantMessage = false;
        this.showSpinner = false;
    }
    // #endregion PUBLIC
    // #endregion ==========> PROPERTIES <==========
    // #region ==========> UTILITIES <==========
    /**
     * Este método recebe uma palavra (podendo ser uma palavra composta), vai
     * separá-la em outras palavras caso ela seja uma palavra composta, irá percorrer
     * as palavras separadas, colocando a inicial de cada palavra em maiúsculo, e
     * depois vai uní-las em uma nova palavra, que terá todas as primeiras letras em
     * maiúsculo para mostrar no título.
     * @param fateWord Palavra (podendo ser ou não palavra composta) que
     * será alterada para ter suas iniciais maiúsculas.
     * @returns Palavra com iniciais maiúscula.
     */
    firstLetterIsLowercase(fateWord) {
        const fateWordSplit = fateWord.split(" ");
        for (let i = 0; i < fateWordSplit.length; i++) {
            fateWordSplit[i] = fateWordSplit[i][0].toLowerCase() + fateWordSplit[i].substring(1);
        }
        return fateWordSplit.join(" ");
    }
    // #endregion ==========> UTILITIES <==========
    // #region ==========> MODALS <==========
    /**
     * Função com o objetivo de mandar um evento para o componente pai para que
     * ele feche o modal.
     */
    closeModal(isExecuteAction = false) {
        this._closingModal.emit(isExecuteAction);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: ConfirmModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: ConfirmModalComponent, selector: "app-confirm-modal", inputs: { modalSubject: "modalSubject", modalType: "modalType", genreAndPluralitySubject: "genreAndPluralitySubject", customMessage: "customMessage", customTitle: "customTitle", customButton: "customButton", customButtonLoading: "customButtonLoading", importantMessage: "importantMessage" }, outputs: { _closingModal: "_closingModal" }, ngImport: i0, template: "<div class=\"modal-header modal-style modal-dialog-centered\">\n  <h4 class=\"modal-title pull-left\"> {{ customTitle === '' ? [modalType + ' ' + modalSubject] : customTitle }} </h4>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"\n    (click)=\"closeModal()\"></button>\n</div>\n<div class=\"modal-body\">\n  <div class=\"modal-message\" [class.text-danger.fw-bold]=\"importantMessage\">\n    <span *ngIf=\"customMessage === ''; else showCustomMessage\"> Tem certeza que voc\u00EA quer {{ firstLetterIsLowercase(modalType) }}\n      <span [ngSwitch]=\"genreAndPluralitySubject\">\n        <span *ngSwitchCase=\"'masc singular'\"> este </span>\n        <span *ngSwitchCase=\"'masc plural'\"> estes </span>\n        <span *ngSwitchCase=\"'fem singular'\"> esta </span>\n        <span *ngSwitchCase=\"'fem plural'\"> estas </span>\n      </span>\n      {{ firstLetterIsLowercase(modalSubject) }}?\n    </span>\n\n    <ng-template #showCustomMessage>\n      <span> {{ customMessage }} </span>\n    </ng-template>\n\n    <span *ngIf=\"modalType == 'Excluir'\" class=\"text-danger fw-bold\"> (esta a\u00E7\u00E3o \u00E9 irrevers\u00EDvel) </span>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-outline-primary modal-button\"\n    (click)=\"closeModal()\"> Cancelar </button>\n\n  <button *ngIf=\"!showSpinner; else loadingButton\" type=\"button\" class=\"btn btn-primary modal-button\"\n    (click)=\"showSpinner = true; closeModal(true)\"> {{ customButton === '' ? modalType : customButton }} </button>\n\n  <ng-template #loadingButton>\n    <button class=\"btn btn-primary modal-button\" type=\"button\" disabled>\n      <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n      <span> {{ customButtonLoading === '' ? [modalType == 'Excluir' ? 'Excluindo...' : [modalType == 'Ativar' ? 'Ativando...' : 'Inativando...']] : customButtonLoading }} </span>\n    </button>\n  </ng-template>\n\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: ConfirmModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-confirm-modal', template: "<div class=\"modal-header modal-style modal-dialog-centered\">\n  <h4 class=\"modal-title pull-left\"> {{ customTitle === '' ? [modalType + ' ' + modalSubject] : customTitle }} </h4>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"\n    (click)=\"closeModal()\"></button>\n</div>\n<div class=\"modal-body\">\n  <div class=\"modal-message\" [class.text-danger.fw-bold]=\"importantMessage\">\n    <span *ngIf=\"customMessage === ''; else showCustomMessage\"> Tem certeza que voc\u00EA quer {{ firstLetterIsLowercase(modalType) }}\n      <span [ngSwitch]=\"genreAndPluralitySubject\">\n        <span *ngSwitchCase=\"'masc singular'\"> este </span>\n        <span *ngSwitchCase=\"'masc plural'\"> estes </span>\n        <span *ngSwitchCase=\"'fem singular'\"> esta </span>\n        <span *ngSwitchCase=\"'fem plural'\"> estas </span>\n      </span>\n      {{ firstLetterIsLowercase(modalSubject) }}?\n    </span>\n\n    <ng-template #showCustomMessage>\n      <span> {{ customMessage }} </span>\n    </ng-template>\n\n    <span *ngIf=\"modalType == 'Excluir'\" class=\"text-danger fw-bold\"> (esta a\u00E7\u00E3o \u00E9 irrevers\u00EDvel) </span>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-outline-primary modal-button\"\n    (click)=\"closeModal()\"> Cancelar </button>\n\n  <button *ngIf=\"!showSpinner; else loadingButton\" type=\"button\" class=\"btn btn-primary modal-button\"\n    (click)=\"showSpinner = true; closeModal(true)\"> {{ customButton === '' ? modalType : customButton }} </button>\n\n  <ng-template #loadingButton>\n    <button class=\"btn btn-primary modal-button\" type=\"button\" disabled>\n      <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n      <span> {{ customButtonLoading === '' ? [modalType == 'Excluir' ? 'Excluindo...' : [modalType == 'Ativar' ? 'Ativando...' : 'Inativando...']] : customButtonLoading }} </span>\n    </button>\n  </ng-template>\n\n</div>\n" }]
        }], ctorParameters: () => [], propDecorators: { _closingModal: [{
                type: Output
            }], modalSubject: [{
                type: Input
            }], modalType: [{
                type: Input
            }], genreAndPluralitySubject: [{
                type: Input
            }], customMessage: [{
                type: Input
            }], customTitle: [{
                type: Input
            }], customButton: [{
                type: Input
            }], customButtonLoading: [{
                type: Input
            }], importantMessage: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,